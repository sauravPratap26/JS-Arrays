//this is to practice reduce, the questions are generated by chatgpt

/**
 * Sum of all numbers in an array
 * // [1, 2, 3, 4] → 10
 */

const numArray = [1, 2, 3, 4, 5, 6];
const sum = numArray.reduce((acc, value) => acc + value);
const sum1 = numArray.reduce((acc, value) => acc + value, 0);
// console.log(sum,"",sum1)

/**
 * Find the maximum number
 * // [3, 7, 2, 9] → 9
 */

const maxArray = [3, 7, 2, 9];
const maxNumber = maxArray.reduce((acc, value) => (acc > value ? acc : value));
// console.log(maxNumber)

/**
 * Flatten a 2D array
 * // [[1, 2], [3, 4], [5]] → [1, 2, 3, 4, 5]
 */

const array2d = [[1, 2], [3, 4], [5]];
const flattenedArray = array2d.reduce((acc, value) => [...acc, ...value], []);
// console.log(flattenedArray)

/**
 * Count the frequency of elements
 * // ['apple', 'banana', 'apple'] → { apple: 2, banana: 1 }
 */

const fruits = ["apple", "banana", "apple"];
const fruitsCountObj = fruits.reduce((acc, value) => {
  if (acc.hasOwnProperty(value)) {
    acc[value] += 1;
  } else {
    acc[value] = 1;
  }
  return acc;
}, {});
// console.log(fruitsCountObj)

/**
 * Reverse a string
 * "hello" → "olleh"
 */

const str = "hello boy";
const charArray = str.split("");
const reversedStr = charArray.reduceRight((acc, value) => acc + value, "");
// console.log(reversedStr);

//***********************************************MEDIUM*********************************************** */

/**
 * // Group people by age group
const people = [
  { name: "Alice", age: 21 },
  { name: "Bob", age: 25 },
  { name: "Charlie", age: 21 }
];
// → { 21: [Alice, Charlie], 25: [Bob] }
 * 
 */

const people = [
  { name: "Alice", age: 21 },
  { name: "Bob", age: 25 },
  { name: "Charlie", age: 21 },
];
const peopleGroup = people.reduce((acc, value) => {
  if (acc.hasOwnProperty(value.age)) {
    acc[value.age].push(value.name);
  } else {
    acc[value.age] = [value.name];
  }
  return acc;
}, {});
// console.log(peopleGroup);

/**
 *Convert array to object keyed by `id`
const users = [
  { id: 1, name: "Saurav" },
  { id: 2, name: "Raj" }
];
// → { 1: {…}, 2: {…} }
 */

const users = [
  { id: 1, name: "Saurav" },
  { id: 2, name: "Raj" },
];
const lookupUser = users.reduce((acc, value) => {
  acc[value.id] = { ...value };
  return acc;
}, {});
// console.log(lookupUser);

//***********************************************ADVANCE*********************************************** */
/**
 *Implement your own map() or filter() using reduce()
const customMap = (arr, fn) => arr.reduce((acc, val) => {
  acc.push(fn(val));
  return acc;
}, []);
 */

const customMap = (arr, fn) =>
  arr.reduce((acc, value) => {
    acc.push(fn(value));
    return acc;
  }, []);

const customFilter = (arr, fn) =>
  arr.reduce((acc, value) => {
    if (fn(value)) {
      acc.push(value);
    }
    return acc;
  }, []);
const normalArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];
const multiplyBy2 = customMap(normalArray, (value) => value * 2);
const powerOf2 = customMap(normalArray, (value) => value ** 2);
const onlyEven = customFilter(normalArray, (value) =>
  value % 2 == 0 ? true : false
);
const onlyOdd = customFilter(normalArray, (value) =>
  value % 2 != 0 ? true : false
);
// console.log(multiplyBy2, "", powerOf2);
// console.log(onlyEven, "", onlyOdd);

/**
 * Group characters and count vowels
 * // "sauravsingh" → { vowels: 5, consonants: 6 }
 */

const normalString = "sauravsingh";
const charNormarlStringArray = normalString.split("");
const vowelConsonantsResult = charNormarlStringArray.reduce(
  (acc, value) => {
    const lowerCase = value.toLowerCase();
    if (["a", "e", "i", "o", "u"].includes(lowerCase)) {
      acc.vowels += 1;
    } else {
      acc.consonants += 1;
    }
    return acc;
  },
  {
    vowels: 0,
    consonants: 0,
  }
);
// console.log(vowelConsonant

/**
 * Parse query string to object
 * "name=Saurav&age=25" → { name: "Saurav", age: "25" }
 */

const queryString = "name=Saurav&age=25";
const queryArray = queryString.split("&");
const queryResult = queryArray.reduce((acc, value) => {
  const keyValue = value.split("=");
  acc[keyValue[0]] = keyValue[1];
  return acc;
}, {});
// console.log(queryResult);

/**
 * Find duplicate elements
 * [1, 2, 3, 2, 4, 1] → [2, 1]
 */

const nums = [1, 2, 3, 2, 4, 1, 5];

const seen = {};
const duplicates = nums.reduce((acc, num) => {
  if (seen[num]) {
    if (!acc.includes(num)) acc.push(num);
  } else {
    seen[num] = true;
  }
  return acc;
}, []);

console.log(duplicates);
